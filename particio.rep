nat max_grup;   //numero màxim de GRUPS
nat n_max;  //numero màxim de NODES
nat n_elem;       // Nombre de nodes del subarbre
struct node {
  T _k;      // Clau
  node* _esq;   // fill esquerre
  node* _dret;  // fill dret
  nat alt_max;
  node* representant;
  nat fills;
};
node *_arrel;

/////////////////////////
//// METODES PRIVATS////
///////////////////////

//Mètode Constructora
node* copia_particio(node *n);
void destrueix_particio(node* p);
void copia_repre(node* p, node* a, node* auxiliar);

///Mètodes d'afegir
node* insereix_avl(node *n, const T &k);
node* newNode(T k);
static nat altura_max(node *n);
static nat max(nat a, nat b);
static nat factor_eq(node *n);
static node* rightRotate(node *y);
static node* leftRotate(node *x);

//Mètode find
node* find(node *n) const throw(error);

//Mètodes d'UNIR
bool existeix(node *n, T e, bool trobat) const throw();
node* buscanode(node *n, T e) const throw();
