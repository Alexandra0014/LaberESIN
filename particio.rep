/** CLASSE PARTICIÓ **/
/*
    Aquest mòdul té com a objectiu emmagatzemar una col·lecció d'elements de tipus T,
    classificats en diferents grups. És a dir, mitjançant un AVL, anem emmagatzemant
    els diferents elements en grups diferents amb posibilitat d'unió, on cada grup
    té el seu propi representant.

    Hem decidit utilitzar l'algoritme d'emmagatzematge AVL en comptes de per exemple Taules Hash,
    perquè tot i tenir una complexitat de O(1) que supera la del AVL que s'espera que sigui O(log n),
    
*/

/** ATRIBUTS PRIVAT **/
*/
    Per a la realització d'aquesta classe hem hagut de crear diversos atributs privats. Per començar
/*

nat max_grup;   //numero màxim de GRUPS
nat n_max;  //numero màxim de NODES
nat n_elem;       // Nombre de nodes del subarbre
struct node {
  T _k;      // Clau
  node* _esq;   // fill esquerre
  node* _dret;  // fill dret
  nat alt_max;
  node* representant;
  nat fills;
};
node *_arrel;

/** MÈTODES PRIVATS **/

//Mètode Constructora
node* copia_particio(node *n);
void destrueix_particio(node* p);
void copia_repre(node* p, node* a, node* auxiliar);

///Mètodes d'afegir
node* insereix_avl(node *n, const T &k);
node* newNode(T k);
static nat altura_max(node *n);
static nat max(nat a, nat b);
static nat factor_eq(node *n);
static node* rightRotate(node *y);
static node* leftRotate(node *x);

//Mètode find
node* find(node *n) const throw(error);

//Mètodes d'UNIR
bool existeix(node *n, T e, bool trobat) const throw();
node* buscanode(node *n, T e) const throw();


//void preOrder(node *n)const throw();
